import numpy as np
import matplotlib.pyplot as plt

# 1. Исходные табличные точки (x_i, y_i)
x_data = np.array([0.0, 0.2, 0.4, 0.6, 0.8,
                   1.0, 1.2, 1.4, 1.6, 1.8, 2.0])
y_data = np.array([
    0.0000, 0.3997, 0.7967, 1.1745, 1.4977,
    1.7143, 1.7820, 1.7060, 1.5282, 1.3092, 1.0909
])

# 2. Коэффициенты ЛИНЕЙНОЙ аппроксимации (MNK)
#    L(x) = a0 + a1*x
#    Ранее при ручном решении мы получили значения ~0.6077 и ~0.5741
#    Ниже - уточнённые при помощи точного вычисления (np.polyfit) для этих же данных:
a0 = 0.60745909
a1 = 0.57428636

# 3. Коэффициенты КВАДРАТИЧНОЙ аппроксимации (MNK)
#    Q(x) = b0 + b1*x + b2*x^2
#    Они вычислены тем же способом (np.polyfit) на основании наших точек:
b0 = -0.08574545
b1 =  2.88496818
b2 = -1.15534091

# 4. Зададим сами функции для удобства
def f_func(x):
    """Исходная функция: f(x) = 12x / (x^4 + 6)."""
    return 12*x / (x**4 + 6)

def L_func(x):
    """Линейная аппроксимация L(x) = a0 + a1*x."""
    return a0 + a1*x

def Q_func(x):
    """Квадратичная аппроксимация Q(x) = b0 + b1*x + b2*x^2."""
    return b0 + b1*x + b2*x**2

# 5. Создаём "плотную" сетку для гладких кривых (функции и аппроксимаций)
x_dense = np.linspace(0, 2, 200)

# Считаем значения
y_func  = f_func(x_dense)
y_lin   = L_func(x_dense)
y_quad  = Q_func(x_dense)

# 6. Построение графиков
plt.figure()

# 6.1 Табличные точки - наносим в виде разброса (scatter)
plt.scatter(x_data, y_data, label='Табличные точки')

# 6.2 Исходная функция
plt.plot(x_dense, y_func, label='Исходная функция f(x)')

# 6.3 Линейная аппроксимация
plt.plot(x_dense, y_lin, label='Линейная аппроксимация L(x)')

# 6.4 Квадратичная аппроксимация
plt.plot(x_dense, y_quad, label='Квадратичная аппроксимация Q(x)')

# Подписи осей и легенда
plt.xlabel('x')
plt.ylabel('y')
plt.title('Сравнение: исходная функция и аппроксимации')
plt.legend()
plt.grid()

# Отображаем
plt.show()
